{"version":3,"file":"static/js/288.461beeb3.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MyContacts/Form/Form.module.css?f585","redux/selectors.js","components/MyContacts/Form/Form.jsx","webpack://react-homework-template/./src/components/MyContacts/ContactsList/ContactList.module.css?10a1","components/MyContacts/ContactsList/ContactList.jsx","webpack://react-homework-template/./src/components/MyContacts/Filter/Filter.module.css?6d66","components/MyContacts/Filter/Filter.jsx","components/MyContacts/MyContacts.jsx","pages/MyContactsPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Form_form__SpHx3\",\"label\":\"Form_label__abgBe\",\"input\":\"Form_input__SITSS\",\"btn\":\"Form_btn__mcC4m\"};","// export const getContacts = store => store.contacts;\n\nexport const getFilteredContacts = ({ contacts, filter }) => {\n  if (!filter) {\n    return contacts.items;\n  }\n\n  const normalizedFilter = filter.toLowerCase();\n  const result = contacts.items.filter(({ name, number }) => {\n    const normalizedName = name.toLowerCase();\n    const filteredNumber = number;\n    return (\n      normalizedName.includes(normalizedFilter) ||\n      filteredNumber.includes(normalizedFilter)\n    );\n  });\n\n  return result;\n};\n\nexport const getFilter = ({ filter }) => filter;\n","import { useState } from 'react';\n\nimport { useEffect } from 'react';\n\nimport {\n  fetchAllContacts,\n  fetchAddContact,\n} from 'redux/contacts/contactsOperations';\n\nimport { nanoid } from 'nanoid';\n\nimport css from './Form.module.css';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { getFilteredContacts } from 'redux/selectors';\n\nconst Form = () => {\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchAllContacts());\n  }, [dispatch]);\n\n  const onAddContact = payload => {\n    const normalizedName = payload.name.toLowerCase();\n\n    contacts.find(\n      contact =>\n        contact.name.toLowerCase() === normalizedName ||\n        contact.number === payload.number\n    )\n      ? alert(`This contact is already in your book.`)\n      : dispatch(fetchAddContact(payload)) && setState({ ...initialState });\n  };\n\n  const initialState = {\n    name: '',\n    number: '',\n  };\n\n  const [state, setState] = useState({ ...initialState });\n\n  const nameInputId = nanoid();\n  const phoneInputId = nanoid();\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setState(prevState => {\n      return { ...prevState, [name]: value };\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onAddContact(state);\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.label} htmlFor={nameInputId}>\n        Name\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          value={state.name}\n          id={nameInputId}\n          onChange={handleChange}\n          required\n        />\n      </label>\n      <label className={css.label} htmlFor={nameInputId}>\n        Number\n        <input\n          className={css.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          value={state.number}\n          id={phoneInputId}\n          onChange={handleChange}\n          required\n        />\n      </label>\n\n      <button className={css.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nexport default Form;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__om-YH\",\"item\":\"ContactList_item__6QmGS\",\"btn\":\"ContactList_btn__m5viy\"};","import css from './ContactList.module.css';\n\nimport { fetchDeleteContact } from 'redux/contacts/contactsOperations';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { getFilteredContacts } from 'redux/selectors';\n\nconst ContactList = () => {\n  const contacts = useSelector(getFilteredContacts);\n\n  const dispatch = useDispatch();\n\n  const onRemoveContact = id => {\n    dispatch(fetchDeleteContact(id));\n  };\n\n  return (\n    <ul className={css.list}>\n      {contacts.map(contact => (\n        <li\n          className={css.item}\n          key={contact.id}\n          name={contact.name}\n          number={contact.number}\n        >\n          <p className={css.name}>\n            {contact.name}: <span>{contact.number}</span>\n          </p>\n          <button\n            className={css.btn}\n            onClick={() => onRemoveContact(contact.id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__9XhGP\",\"find\":\"Filter_find__s-Asl\"};","import css from './Filter.module.css';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { getFilter } from 'redux/selectors';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onSetFilter = ({ target }) => {\n    dispatch(setFilter(target.value));\n  };\n\n  return (\n    <label className={css.filter}>\n      Find contacts by name\n      <input\n        className={css.find}\n        onChange={onSetFilter}\n        type=\"text\"\n        name=\"filter\"\n        filter={filter}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import Form from './Form/Form';\nimport ContactList from './ContactsList/ContactList';\nimport Filter from './Filter/Filter';\n\nconst MyContacts = () => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'space-evenly',\n\n        marginLeft: 30,\n        fontSize: 20,\n        color: '#010101',\n      }}\n    >\n      <div>\n        <h1>Phonebook</h1>\n        <Form />\n      </div>\n      <div>\n        <h1>Contacts</h1>\n        <Filter />\n        <ContactList />\n      </div>\n    </div>\n  );\n};\n\nexport default MyContacts;\n","import MyContacts from '../components/MyContacts/MyContacts';\n\nconst MyContactsPage = () => {\n  return (\n    <div className=\"container\">\n      <MyContacts />\n    </div>\n  );\n};\n\nexport default MyContactsPage;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["getFilteredContacts","contacts","filter","items","normalizedFilter","toLowerCase","name","filteredNumber","number","includes","getFilter","useSelector","dispatch","useDispatch","useEffect","fetchAllContacts","initialState","useState","state","setState","nameInputId","nanoid","phoneInputId","handleChange","target","value","prevState","className","css","onSubmit","e","preventDefault","payload","normalizedName","find","contact","alert","fetchAddContact","onAddContact","htmlFor","type","pattern","title","id","onChange","required","map","onClick","fetchDeleteContact","setFilter","style","display","justifyContent","marginLeft","fontSize","color","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}