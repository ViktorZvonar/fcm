{"version":3,"file":"static/js/929.62ae0975.chunk.js","mappings":"oOACA,EAAuB,2BAAvB,EAA0D,4BAA1D,EAA8F,4BAA9F,EAAgI,0B,SCgFhI,EA3EqB,SAAC,GAAkB,IAAhBA,EAAe,EAAfA,SAChBC,EAAe,CACnBC,KAAM,GACNC,MAAO,GACPC,SAAU,IAGZ,GAA0BC,EAAAA,EAAAA,WAAS,UAAKJ,IAAxC,eAAOK,EAAP,KAAcC,EAAd,KAEMC,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MAElBG,EAAe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACdX,EAAgBW,EAAhBX,KAAMY,EAAUD,EAAVC,MACdP,GAAS,SAAAQ,GACP,OAAO,kBAAKA,GAAZ,cAAwBb,EAAOY,GAChC,GACF,EAQD,OACE,kBAAME,UAAWC,EAAUjB,SAPR,SAAAkB,GACnBA,EAAEC,iBACFnB,EAASM,GACTC,GAAS,UAAKN,GACf,EAGC,WACE,mBAAOe,UAAWC,EAAWG,QAASZ,EAAtC,kBAEE,kBACEQ,UAAWC,EACXI,KAAK,OACLnB,KAAK,OACLoB,MAAM,6DACNR,MAAOR,EAAMJ,KACbqB,GAAIf,EACJgB,SAAUZ,EACVa,UAAQ,QAGZ,mBAAOT,UAAWC,EAAWG,QAASZ,EAAtC,mBAEE,kBACEQ,UAAWC,EACXI,KAAK,QACLnB,KAAK,QACLoB,MAAM,uBACNR,MAAOR,EAAMH,MACboB,GAAIb,EACJc,SAAUZ,EACVa,UAAQ,QAGZ,mBAAOT,UAAWC,EAAWG,QAASZ,EAAtC,sBAEE,kBACEQ,UAAWC,EACXI,KAAK,WACLnB,KAAK,WACLoB,MAAM,gFACNR,MAAOR,EAAMF,SACbmB,GAAIZ,EACJa,SAAUZ,EACVa,UAAQ,QAIZ,mBAAQT,UAAWC,EAASI,KAAK,SAAjC,wBAKL,E,kBC3DD,EAdqB,WACnB,IAAMK,GAAWC,EAAAA,EAAAA,MAKjB,OACE,4BACE,2CACA,SAAC,EAAD,CAAc3B,SANC,SAAA4B,GACjBF,GAASG,EAAAA,EAAAA,GAAgBD,GAC1B,MAOF,C,uDCjBD,IAkBInB,EAAS,WAGX,IAH0B,IAAdqB,EAAc,uDAAP,GACfP,EAAK,GACLQ,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfP,GADEY,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOZ,CACR,C","sources":["webpack://react-homework-template/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"RegisterForm_form__Tv43W\",\"label\":\"RegisterForm_label__4pTXF\",\"input\":\"RegisterForm_input__FsgBz\",\"btn\":\"RegisterForm_btn__bgTuW\"};","import { useState } from 'react';\n\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport css from './RegisterForm.module.css';\n\nconst RegisterForm = ({ onSubmit }) => {\n  const initialState = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const [state, setState] = useState({ ...initialState });\n\n  const nameInputId = nanoid();\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n\n  const handleChange = ({ target }) => {\n    const { name, value } = target;\n    setState(prevState => {\n      return { ...prevState, [name]: value };\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(state);\n    setState({ ...initialState });\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.label} htmlFor={nameInputId}>\n        Name\n        <input\n          className={css.input}\n          type=\"text\"\n          name=\"name\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces\"\n          value={state.name}\n          id={nameInputId}\n          onChange={handleChange}\n          required\n        />\n      </label>\n      <label className={css.label} htmlFor={nameInputId}>\n        Email\n        <input\n          className={css.input}\n          type=\"email\"\n          name=\"email\"\n          title=\"Email must contain @\"\n          value={state.email}\n          id={emailInputId}\n          onChange={handleChange}\n          required\n        />\n      </label>\n      <label className={css.label} htmlFor={nameInputId}>\n        Password\n        <input\n          className={css.input}\n          type=\"password\"\n          name=\"password\"\n          title=\"Password must be digits or leters and can contain spaces, dashes, parentheses\"\n          value={state.password}\n          id={passwordInputId}\n          onChange={handleChange}\n          required\n        />\n      </label>\n\n      <button className={css.btn} type=\"submit\">\n        Register\n      </button>\n    </form>\n  );\n};\n\nexport default RegisterForm;\n\nRegisterForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\n\nimport { useDispatch } from 'react-redux';\n\nimport { signUpOperation } from 'redux/auth/authOperations';\n\nconst RegisterPage = () => {\n  const dispatch = useDispatch();\n\n  const onRegister = data => {\n    dispatch(signUpOperation(data));\n  };\n  return (\n    <div>\n      <h2>Register Page</h2>\n      <RegisterForm onSubmit={onRegister} />\n    </div>\n  );\n};\n\nexport default RegisterPage;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["onSubmit","initialState","name","email","password","useState","state","setState","nameInputId","nanoid","emailInputId","passwordInputId","handleChange","target","value","prevState","className","css","e","preventDefault","htmlFor","type","title","id","onChange","required","dispatch","useDispatch","data","signUpOperation","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}